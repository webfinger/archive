#summary the WebFinger protocol
#labels Featured

= WARNING: DRAFT =

This is a draft, with updates based on various messages and blog posts along with various specs as they have matured over the past six months.

= Protocol =

The goal of the protocol is to get an [XrdFiles XRD] XML file describing how to find a user's public metadata from that user's email address.
The following describes the steps in the Webfinger protocol as it leverages LRDD for discovery.

==Split the email address=

Given an email address, *foo@example.com*, turn it into a URI by prepending "acct:" if necessary.  This lets machines digest it more easily.
Grab the domain of *acct:foo@example.com* -- in this case, example.com.  

==Get the domain's host-meta XRD file==

First, you need to get the domain's host-meta XRD file.  In this case, example.com's.  This is available at 
https://example.com/.well-known/host-meta.  If there's no response to an SSL connection there, 
try http://example.com/.well-known/host-meta.  Follow 3xx redirects; remember if anything _wasn't_ retrieved via SSL
connections with valid certificates.

Note that this needs to be done only the first time for each domain, after that you can cache the results using standard
HTTP caching semantics.

===Retrieving host-meta===

{{{
GET /.well-known/host-meta HTTP/1.1
Host: example.com
}}}

The world has enough well-known URLs (`/favicon.ico`, `/crossdomain.xml`, `/robots.txt`), and we felt dirty adding another, so 
the `/.well-known/` prefix (see [http://tools.ietf.org/html/draft-hammer-hostmeta-05 draft-hammer-hostmeta-05]) is the 
virtual directory where we hope future specs add their well-known URLs too.

==Verify the XRD file's signature===

If the XRD file is signed by the domain and wasn't retrieved via SSL, check for an XRD signature.

If it's not signed and either it's ever been signed before, or it's a big company's site which you expect it to be signed from, 
be afraid.  Abort the process.  Probably MITM.  You can fall back to manual discovery (asking the user for info).

Also, once you verify the signature, double check that the XRD <Host> element matches your host string - e.g., example.com.
This keeps example.com from stealing someone else's host-meta file and passing it off as their own.

==Look for the XRD Link-Pattern==

Look for the Link element with rel="lrdd" and attribute _template_ in the domain XRD file.  
Grab the value of the template attribute.  This is a template to map from your acct: URI to a resolvable metadata URL.

e.g.

{{{
<Link rel="lrdd" template="https://meta.example.org/?q={uri}"  type="application/xrd+xml" />
}}}

So given {uri} = acct:foo@example.com, this yields after swizzling:

{{{
https://meta.example.org/?q=acct%3Afoo%40example.com
}}}

(See [http://tools.ietf.org/html/draft-hammer-hostmeta-05#section-3.2.1 draft-hammer-hostmeta-05])

==Get user's XRD file==

{{{
GET /?q=acct%3Afoo%40example.com HTTP/1.1
Host: meta.example.org
}}}

(Again, if the SSL cert doesn't check out or if this isn't an https URL, remember secure=false.  Big security section to be added
later.)

You'll get back an XRD file containing the Links that you're looking for.

Verify that the XRD you get in the end has a <Subject> element that matches the acct: URI you started with:

{{{
<Subject>acct:foo@example.com</Subject>
}}}

(See [http://www.oasis-open.org/committees/download.php/35678/xrd-1.0-wd11.html#element.link xrd-1.0-wd11].)

=Appendix=

See also [http://hueniverse.com/2009/09/implementing-webfinger/ Eran's implementing-webfinger blog post].

Respect and use DNS TTLs and HTTP caching/expiry headers.  Also, XRD has an Expires element so watch out for that.

